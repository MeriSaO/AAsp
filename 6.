#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

void redistribuirajVektore(std::vector<std::vector<int>>& vektori) {

    int ukupanBrojElemenata = 0;
    for (const auto& v : vektori) {
        ukupanBrojElemenata += v.size();
    }


    int n = vektori.size();
    int prosjecanBroj = ukupanBrojElemenata / n;
    int dodatniElementi = ukupanBrojElemenata % n;  


    std::vector<std::pair<int, int>> velicine;
    for (int i = 0; i < n; ++i) {
        velicine.push_back({vektori[i].size(), i});
    }
    std::sort(velicine.begin(), velicine.end());

    int i = 0;
    int j = n - 1;

    while (i < j) {
        int ciljVeci = prosjecanBroj + (dodatniElementi > 0 ? 1 : 0);  
        int visak = velicine[j].first - ciljVeci;

        if (visak == 0) {
            --j;
            continue;
        }

        int ciljManji = prosjecanBroj;  // Ovi trebaju imati prosječan broj
        int manjak = ciljManji - velicine[i].first;


        int prebacivanje = std::min(visak, manjak);

    
        int izVeciIndeks = velicine[j].second;
        int uManjiIndeks = velicine[i].second;

        for (int k = 0; k < prebacivanje; ++k) {
            vektori[uManjiIndeks].push_back(vektori[izVeciIndeks].back());
            vektori[izVeciIndeks].pop_back();
        }


        velicine[j].first -= prebacivanje;
        velicine[i].first += prebacivanje;


        if (velicine[i].first == ciljManji) {
            ++i;
        }


        if (velicine[j].first == ciljVeci) {
            --j;
        }

        // Ažuriramo dodatne elemente
        if (dodatniElementi > 0) {
            --dodatniElementi;
        }
    }
}

int main() {

    std::vector<std::vector<int>> vektori = {
        {1, 2, 3, 4, 5},
        {6, 7},
        {8},
        {9, 10, 11, 12, 13, 14, 15}
    };

    redistribuirajVektore(vektori);


    std::cout << "Nakon redistribucije:" << std::endl;
    for (const auto& vektor : vektori) {
        for (int x : vektor) {
            std::cout << x << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
